{"version":3,"sources":["assets/Drunkord.png","assets/beer_screenshot.png","components/Instructions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Instructions","react_default","a","createElement","className","App","src","require","alt","style","display","verticalAlign","components_Instructions","role","aria-label","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sJAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qHCwBzBC,cAtBM,WACnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,6EAIAF,EAAAC,EAAAC,cAAA,yDACAF,EAAAC,EAAAC,cAAA,mEAEAF,EAAAC,EAAAC,cAAA,gDAEAF,EAAAC,EAAAC,cAAA,8DACAF,EAAAC,EAAAC,cAAA,8FCwBSE,MApCf,WACE,OACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,EAAQ,IAA0BC,IAAI,cAChDP,EAAAC,EAAAC,cAAA,MAAIM,MAAO,CAAEC,QAAS,SAAUC,cAAe,UAA/C,aACAV,EAAAC,EAAAC,cAAA,MAAIM,MAAO,CAAEC,QAAS,WAAtB,0DAIFT,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVE,IAAKC,EAAQ,IACbC,IAAI,mCAGRP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,YACY,IACVH,EAAAC,EAAAC,cAAA,QAAMU,KAAK,MAAMC,aAAW,SAA5B,gBAFF,YAMEb,EAAAC,EAAAC,cAAA,KACEY,KAAK,iCACLC,OAAO,SACPC,IAAI,uBAHN,mBChBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.faafce87.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Drunkord.4072b831.png\";","module.exports = __webpack_public_path__ + \"static/media/beer_screenshot.6ee97c90.png\";","import React from \"react\";\n\nconst Instructions = () => {\n  return (\n    <div className=\"instructions\">\n      <h1>How to use!</h1>\n      <h3>\n        {`!cheers {drink name}\nAdds the drink you are currently drinking`}\n      </h3>\n      <h3>!drinks How many total drinks have been had</h3>\n      <h3>!drunk Lists how many drinks each participant has had</h3>\n\n      <h3>!closingtime Clears the drink list</h3>\n\n      <h3>!db-help Lists all commands that Drunkcord knows</h3>\n      <h3>\n        {`!beers {beer name}\nOutputs data from Untappd about the beer you're drinking!`}\n      </h3>\n    </div>\n  );\n};\n\nexport default Instructions;\n","import React from \"react\";\nimport \"./App.css\";\nimport Instructions from \"./components/Instructions\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <header className=\"header\">\n        <img src={require(\"./assets/Drunkord.png\")} alt=\"Drunkcord\" />\n        <h1 style={{ display: \"inline\", verticalAlign: \"super\" }}>Drunkcord</h1>\n        <h3 style={{ display: \"inline\" }}>\n          A Bot to keep track of who is drinking in the Server!\n        </h3>\n      </header>\n      <Instructions />\n      <div className=\"main\">\n        <img\n          className=\"screenshot\"\n          src={require(\"./assets/beer_screenshot.png\")}\n          alt=\"Show output of consumed beers\"\n        />\n      </div>\n      <div className=\"footer\">\n        Made with{\" \"}\n        <span role=\"img\" aria-label=\"heart\">\n          ❤️\n        </span>\n        ️ by\n        <a\n          href=\"https://github.com/jonnynabors\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Jonny Nabors\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}